// import 'dart:io';
// import 'package:args/args.dart';
// import 'package:path/path.dart' as p;
// import 'package:recase/recase.dart';

// void main(List<String> args) async {
//   final parser = ArgParser(usageLineLength: 120);

//   // root options
//   parser.addFlag('help', abbr: 'h', help: 'Show help', negatable: false);

//   // commands
//   final initCmd = parser.addCommand('init');

//   final makeFeatureCmd = parser.addCommand('make:feature');
//   makeFeatureCmd.addFlag(
//     'force',
//     abbr: 'f',
//     help: 'Overwrite files if already exist',
//     negatable: false,
//   );

//   ArgResults results;
//   try {
//     results = parser.parse(args);
//   } catch (e) {
//     _printError('$e');
//     _printUsage(parser);
//     exitCode = 64; // command line usage error
//     return;
//   }

//   if (results['help'] == true || results.command == null) {
//     _printUsage(parser);
//     return;
//   }

//   switch (results.command!.name) {
//     case 'init':
//       _handleInit();
//       break;

//     case 'make:feature':
//       final cmd = results.command!;
//       if (cmd.arguments.isEmpty) {
//         _printError(
//           'Usage: scout make:feature <feature_name> "Author Name" [--force]',
//         );
//         exitCode = 64;
//         return;
//       }
//       final featureName = cmd.arguments[0];
//       final author = (cmd.arguments.length >= 2) ? cmd.arguments[1] : 'Unknown';
//       final force = cmd['force'] == true;

//       final config = _loadConfigOrExit();
//       if (config == null) return;

//       final ok = _validateConfig(config);
//       if (!ok) {
//         _printError(
//           'Config invalid. Please re-run `scout init` to regenerate config.',
//         );
//         exitCode = 65;
//         return;
//       }

//       _generateFeature(
//         config: config,
//         featureName: featureName,
//         author: author,
//         force: force,
//       );
//       break;

//     case 'make:usecase':
//       final cmd = results.command!;
//       if (cmd.arguments.length < 2) {
//         _printError(
//           'Usage: scout make:usecase <feature_name> <usecase_name> "Author Name"',
//         );
//         exitCode = 64;
//         return;
//       }

//       final featureName = cmd.arguments[0];
//       final usecaseName = cmd.arguments[1];
//       final author = (cmd.arguments.length >= 3) ? cmd.arguments[2] : 'Unknown';

//       final config = _loadConfigOrExit();
//       if (config == null) return;

//       await _generateUsecase(
//         config: config,
//         featureName: featureName,
//         usecaseName: usecaseName,
//         author: author,
//       );
//       break;

//     default:
//       _printUsage(parser);
//   }
// }

// void _printUsage(ArgParser parser) {
//   stdout.writeln('''
// scout — CLI scaffolder

// Usage:
//   scout init
//   scout make:feature <feature_name> "Author Name" [--force]

// Examples:
//   scout init
//   scout make:feature example "Widiyanto Ramadhan"
// ''');
// }

// void _printError(String msg) => stderr.writeln('[x] $msg');
// void _printInfo(String msg) => stdout.writeln('[i] $msg');
// void _printDone(String msg) => stdout.writeln('[✓] $msg');

// // --------------------- INIT ---------------------

// void _handleInit() {
//   final file = File(p.join(Directory.current.path, 'scout_config.dart'));
//   const content = '''
// /// Generated by scout init
// /// Re-run \`scout init\` to replace this file.
// class ScoutConfig {
//   static const String model = "lib/src/features/features_name/data/model";
//   static const String entity = "lib/src/features/features_name/domain/entity";
//   static const String datasource = "lib/src/features/features_name/data/datasource";
//   static const String repository = "lib/src/features/features_name/data/repository";
//   static const String usecase = "lib/src/features/features_name/domain/usecase";
//   static const String ui = "lib/src/features/features_name/presentation/ui";
//   static const String controller = "lib/src/features/features_name/presentation/controller";
//   static const String stateManagement = "provider";
// }
// ''';

//   if (file.existsSync()) {
//     _printInfo('scout_config.dart exists. Replacing...');
//   }
//   file.writeAsStringSync(content);
//   _printDone('scout_config.dart created/replaced');
// }

// // --------------------- CONFIG ---------------------

// class _Config {
//   final String model;
//   final String entity;
//   final String datasource;
//   final String repository;
//   final String usecase;
//   final String ui;
//   final String controller;
//   final String stateManagement;

//   _Config({
//     required this.model,
//     required this.entity,
//     required this.datasource,
//     required this.repository,
//     required this.usecase,
//     required this.ui,
//     required this.controller,
//     required this.stateManagement,
//   });
// }

// _Config? _loadConfigOrExit() {
//   final file = File(p.join(Directory.current.path, 'scout_config.dart'));
//   if (!file.existsSync()) {
//     _printError('Please run `scout init` first.');
//     exitCode = 66; // cannot open input
//     return null;
//   }
//   final content = file.readAsStringSync();

//   String? _read(String key) {
//     final reg = RegExp(
//       'static const String\\s+$key\\s*=\\s*"([^"]*)"',
//       multiLine: true,
//     );
//     final m = reg.firstMatch(content);
//     return m?.group(1);
//   }

//   return _Config(
//     model: _read('model') ?? '',
//     entity: _read('entity') ?? '',
//     datasource: _read('datasource') ?? '',
//     repository: _read('repository') ?? '',
//     usecase: _read('usecase') ?? '',
//     ui: _read('ui') ?? '',
//     controller: _read('controller') ?? '',
//     stateManagement: _read('stateManagement') ?? '',
//   );
// }

// bool _validateConfig(_Config c) {
//   final values = {
//     'model': c.model,
//     'entity': c.entity,
//     'datasource': c.datasource,
//     'repository': c.repository,
//     'usecase': c.usecase,
//     'ui': c.ui,
//     'controller': c.controller,
//   };
//   final empties = values.entries
//       .where((e) => e.value.trim().isEmpty)
//       .map((e) => e.key)
//       .toList();
//   if (empties.isNotEmpty) {
//     _printError('These config values are empty: ${empties.join(', ')}');
//     return false;
//   }
//   return true;
// }

// // --------------------- STATE MANAGEMENT ---------------------

// String _resolveStateManagement(_Config config) {
//   if (config.stateManagement.isNotEmpty) return config.stateManagement;

//   stdout.writeln('Pilih state management untuk feature ini:');
//   stdout.writeln('1) setState (default Flutter)');
//   stdout.writeln('2) Provider');
//   stdout.writeln('3) Riverpod');
//   stdout.writeln('4) Bloc / Cubit');
//   stdout.writeln('5) GetX');
//   stdout.writeln('6) MobX');
//   stdout.writeln('7) Redux');
//   stdout.writeln('8) MVVM');
//   stdout.write('Masukkan pilihan (1-8): ');
//   final choice = stdin.readLineSync();

//   switch (choice) {
//     case '1':
//       return 'setstate';
//     case '2':
//       return 'provider';
//     case '3':
//       return 'riverpod';
//     case '4':
//       return 'bloc';
//     case '5':
//       return 'getx';
//     case '6':
//       return 'mobx';
//     case '7':
//       return 'redux';
//     case '8':
//       return 'mvvm';
//     default:
//       stdout.writeln('[!] Invalid choice, default ke "setstate"');
//       return 'setstate';
//   }
// }

// // --------------------- GENERATOR ---------------------

// void _generateFeature({
//   required _Config config,
//   required String featureName,
//   required String author,
//   required bool force,
// }) {
//   final stateManagement = _resolveStateManagement(config);

//   // casing helpers
//   final rc = ReCase(featureName);
//   final pascal = rc.pascalCase; // Example
//   final camel = rc.camelCase; // example
//   final snake = rc.snakeCase; // example or my_feature
//   final today = DateTime.now();

//   // resolve path helper: replace "features_name" with snake
//   String r(String pattern) => pattern.replaceAll('features_name', snake);

//   // 1) ensure folders exist (even kalau cuma folder kosong)
//   final dirs = <String>[
//     r(config.model),
//     r(config.entity),
//     r(config.datasource),
//     r(config.repository),
//     r(config.usecase),
//     r(config.ui),
//   ];

//   // state management specific
//   switch (stateManagement) {
//     case 'provider':
//     case 'getx':
//       dirs.addAll([r('${p.dirname(config.ui)}/controller')]);
//       break;
//     case 'riverpod':
//       dirs.addAll([
//         r('${p.dirname(config.ui)}/controller'),
//         r('${p.dirname(config.ui)}/provider'),
//       ]);
//       break;
//     case 'bloc':
//       dirs.addAll([r('${p.dirname(config.ui)}/bloc')]);
//       break;
//     case 'mobx':
//       dirs.addAll([r('${p.dirname(config.ui)}/store')]);
//       break;
//     case 'redux':
//       dirs.addAll([
//         r('${p.dirname(config.ui)}/redux/actions'),
//         r('${p.dirname(config.ui)}/redux/reducers'),
//         r('${p.dirname(config.ui)}/redux/middleware'),
//       ]);
//       break;
//     case 'mvvm':
//       dirs.addAll([r('${p.dirname(config.ui)}/viewmodel')]);
//       break;
//   }

//   for (final d in dirs) {
//     Directory(d).createSync(recursive: true);
//   }

//   // 2) files to generate
//   final dsDir = r(config.datasource);
//   final repoDir = r(config.repository);
//   final usecaseDir = r(config.usecase);
//   final uiDir = r(config.ui);
//   final controllerDir = r(config.controller);

//   final files = <String, String>{
//     // datasource
//     p.join(dsDir, '${snake}_remote_datasource.dart'): _tplDatasourceInterface(
//       pascal,
//       author,
//       today,
//     ),
//     p.join(dsDir, '${snake}_remote_datasource_impl.dart'): _tplDatasourceImpl(
//       pascal,
//       snake,
//       author,
//       today,
//     ),

//     // repository
//     p.join(repoDir, '${snake}_repository.dart'): _tplRepositoryInterface(
//       pascal,
//       author,
//       today,
//     ),
//     p.join(repoDir, '${snake}_repository_impl.dart'): _tplRepositoryImpl(
//       pascal,
//       snake,
//       author,
//       today,
//     ),

//     // usecase
//     // p.join(usecaseDir, '${snake}_usecase.dart'): _tplUsecaseInterface(
//     //   pascal,
//     //   author,
//     //   today,
//     // ),
//     // p.join(usecaseDir, '${snake}_usecase_impl.dart'): _tplUsecaseImpl(
//     //   pascal,
//     //   snake,
//     //   author,
//     //   today,
//     // ),

//     // ui
//     p.join(uiDir, '${snake}_page.dart'): _tplPage(pascal, snake, author, today),

//     // controller
//     p.join(controllerDir, '${snake}_controller.dart'): _tplController(
//       pascal,
//       camel,
//       author,
//       today,
//     ),
//   };

//   // 3) write files
//   for (final e in files.entries) {
//     final f = File(e.key);
//     if (f.existsSync() && !force) {
//       _printInfo('Skip (exists): ${e.key}  (use --force to overwrite)');
//       continue;
//     }
//     f.writeAsStringSync(e.value);
//     _printDone('Wrote: ${e.key}');
//   }

//   // pastikan dependencies
//   _ensureDependencies(stateManagement);

//   _printDone('Feature `$featureName` created by $author with $stateManagement');
// }

// // --------------------- DEPENDENCIES ---------------------

// void _ensureDependencies(String stateManagement) {
//   final file = File('pubspec.yaml');
//   if (!file.existsSync()) {
//     _printError('pubspec.yaml tidak ditemukan.');
//     exitCode = 66;
//     return;
//   }

//   final lines = file.readAsLinesSync().toList();
//   final depsIndex = lines.indexWhere((l) => l.trim() == 'dependencies:');
//   if (depsIndex < 0) {
//     _printError('Bagian "dependencies:" tidak ditemukan di pubspec.yaml.');
//     return;
//   }

//   final needDeps = <String, String>{
//     'bloc': '''
//   bloc: ^9.0.0
//   flutter_bloc: ^9.0.0''',
//     'riverpod': '  flutter_riverpod: ^2.6.1',
//     'provider': '  provider: ^6.1.2',
//     'getx': '  get: ^4.6.5',
//     'mobx': '''
//   mobx: ^2.2.1+1
//   flutter_mobx: ^2.2.1+1''',
//     'redux': '''
//   redux: ^5.0.0
//   flutter_redux: ^0.10.0''',
//     'mvvm': '',
//     'setstate': '',
//   };

//   if (!needDeps.containsKey(stateManagement)) return;
//   final depString = needDeps[stateManagement]!;
//   if (depString.isEmpty) {
//     _printInfo('No dependency required for "$stateManagement".');
//     return;
//   }

//   final deps = depString.split('\n');
//   final alreadyExist = deps.every(
//     (d) => lines.any((l) => l.trim().startsWith(d.trim().split(':')[0])),
//   );

//   if (alreadyExist) {
//     _printInfo('Dependencies for "$stateManagement" already exist, skip.');
//     return;
//   }

//   // insert dependencies
//   lines.insertAll(depsIndex + 1, deps);
//   file.writeAsStringSync(lines.join('\n'));
//   _printDone('pubspec.yaml updated with $stateManagement dependencies');

//   // run flutter pub get
//   _runPubGet();
// }

// void _runPubGet() {
//   _printInfo('Running flutter pub get...');
//   final result = Process.runSync('flutter', ['pub', 'get']);
//   if (result.exitCode == 0) {
//     _printDone('flutter pub get success');
//   } else {
//     _printError('flutter pub get failed:\n${result.stderr}');
//   }
// }

// // ----------------- GENERATE USECASE ------------------
// Future<void> _generateUsecase({
//   required _Config config,
//   required String featureName,
//   required String usecaseName,
//   required String author,
// }) async {
//   final rc = ReCase(usecaseName);
//   final pascal = rc.pascalCase; // GetListData
//   final camel = rc.camelCase; // getListData
//   final snake = rc.snakeCase; // get_list_data
//   final today = DateTime.now();

//   final featureSnake = ReCase(featureName).snakeCase; // live_bird

//   // 1. ensure model folder (pakai feature name, bukan usecase name!)
//   final modelDir = config.model.replaceAll('features_name', featureSnake);
//   Directory(modelDir).createSync(recursive: true);

//   // 2. tanya request
//   stdout.write("Apakah usecase ini mempunyai request? (y/n): ");
//   final hasRequest = stdin.readLineSync()?.toLowerCase() == 'y';
//   if (hasRequest) {
//     final reqDir = p.join(modelDir, 'request');
//     Directory(reqDir).createSync(recursive: true);

//     stdout.writeln("Masukan JSON request body, akhiri dengan END:");
//     final buffer = StringBuffer();
//     while (true) {
//       final line = stdin.readLineSync();
//       if (line == 'END') break;
//       buffer.writeln(line);
//     }

//     final jsonReq = buffer.toString();
//     final reqFile = File(p.join(reqDir, '${snake}_request_model.dart'));
//     reqFile.writeAsStringSync(_tplModelRequest(pascal, author, today, jsonReq));

//     _printDone("Request model generated: ${reqFile.path}");
//   }

//   // 3. tanya response
//   stdout.write("Apakah usecase ini mempunyai response? (y/n): ");
//   final hasResponse = stdin.readLineSync()?.toLowerCase() == 'y';
//   if (hasResponse) {
//     final resDir = p.join(modelDir, 'response');
//     Directory(resDir).createSync(recursive: true);

//     stdout.writeln("Masukan JSON response body, akhiri dengan END:");
//     final buffer = StringBuffer();
//     while (true) {
//       final line = stdin.readLineSync();
//       if (line == 'END') break;
//       buffer.writeln(line);
//     }

//     final jsonRes = buffer.toString();
//     final resFile = File(p.join(resDir, '${snake}_response_model.dart'));
//     resFile.writeAsStringSync(
//       _tplModelResponse(pascal, author, today, jsonRes),
//     );

//     _printDone("Response model generated: ${resFile.path}");
//   }

//   // 4. tanya endpoint
//   stdout.write("Masukan endpoint contoh (api/v1/...): ");
//   final endpoint = stdin.readLineSync() ?? '';

//   // 5. generate usecase interface & impl
//   final usecaseDir = config.usecase.replaceAll('features_name', featureSnake);
//   Directory(usecaseDir).createSync(recursive: true);

//   final ucInterface = File(p.join(usecaseDir, '${snake}_usecase.dart'));
//   ucInterface.writeAsStringSync(_tplUsecaseInterface(pascal, author, today));

//   final ucImpl = File(p.join(usecaseDir, '${snake}_usecase_impl.dart'));
//   ucImpl.writeAsStringSync(_tplUsecaseImpl(pascal, snake, author, today));

//   _printDone("Usecase generated: $pascal");

//   // 6. Tambahkan kontrak di repository + datasource
//   final repoDir = config.repository.replaceAll('features_name', featureSnake);
//   final dsDir = config.datasource.replaceAll('features_name', featureSnake);

//   final repoFile = File(p.join(repoDir, '${snake}_repository.dart'));
//   final repoImplFile = File(p.join(repoDir, '${snake}_repository_impl.dart'));
//   final dsFile = File(p.join(dsDir, '${snake}_remote_datasource.dart'));
//   final dsImplFile = File(
//     p.join(dsDir, '${snake}_remote_datasource_impl.dart'),
//   );

//   _appendToRepo(repoFile, pascal, camel);
//   _appendToRepoImpl(repoImplFile, pascal, camel);
//   _appendToDs(dsFile, pascal, camel);
//   _appendToDsImpl(dsImplFile, pascal, camel, endpoint);
// }

// // --------------------- TEMPLATES ---------------------

// String _header(String author, DateTime dt, String name) =>
//     '''/// Generated by scout
// /// Author: $author
// /// Date  : ${dt.toIso8601String()}
// /// File  : $name

// ''';

// // datasource
// String _tplDatasourceInterface(String pascal, String author, DateTime dt) {
//   final file = '${pascal.snakeCase}_remote_datasource.dart';
//   return _header(author, dt, file) +
//       '''
// abstract class ${pascal}RemoteDataSource {
//   // TODO: define remote methods
// }
// ''';
// }

// String _tplDatasourceImpl(
//   String pascal,
//   String snake,
//   String author,
//   DateTime dt,
// ) {
//   final file = '${snake}_remote_datasource_impl.dart';
//   return _header(author, dt, file) +
//       '''
// import '${snake}_remote_datasource.dart';

// class ${pascal}RemoteDataSourceImpl implements ${pascal}RemoteDataSource {
//   ${pascal}RemoteDataSourceImpl();

//   // TODO: implement methods
// }
// ''';
// }

// // repository
// String _tplRepositoryInterface(String pascal, String author, DateTime dt) {
//   final file = '${pascal.snakeCase}_repository.dart';
//   return _header(author, dt, file) +
//       '''
// abstract class ${pascal}Repository {
//   // TODO: define repository contracts
// }
// ''';
// }

// String _tplRepositoryImpl(
//   String pascal,
//   String snake,
//   String author,
//   DateTime dt,
// ) {
//   final file = '${snake}_repository_impl.dart';
//   return _header(author, dt, file) +
//       '''
// import '${snake}_repository.dart';
// import '../datasource/${snake}_remote_datasource.dart';

// class ${pascal}RepositoryImpl implements ${pascal}Repository {
//   final ${pascal}RemoteDataSource remote;

//   ${pascal}RepositoryImpl(this.remote);

//   // TODO: implement repository methods
// }
// ''';
// }

// // ui page
// String _tplPage(String pascal, String snake, String author, DateTime dt) {
//   final file = '${snake}_page.dart';
//   return _header(author, dt, file) +
//       '''
// import 'package:flutter/material.dart';

// class ${pascal}Page extends StatelessWidget {
//   const ${pascal}Page({super.key});

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text('$pascal')),
//       body: const Center(child: Text('Hello from $pascal feature!')),
//     );
//   }
// }
// ''';
// }

// // controller
// String _tplController(String pascal, String camel, String author, DateTime dt) {
//   final file = '${pascal.snakeCase}_controller.dart';
//   return _header(author, dt, file) +
//       '''
// import 'package:flutter/foundation.dart';

// class ${pascal}Controller extends ChangeNotifier {
//   // Example state
//   bool _loading = false;
//   bool get loading => _loading;

//   void setLoading(bool v) {
//     _loading = v;
//     notifyListeners();
//   }
// }
// ''';
// }

// // model
// String _tplModelRequest(
//   String pascal,
//   String author,
//   DateTime dt,
//   String json,
// ) {
//   final file = '${pascal.snakeCase}_request_model.dart';
//   return _header(author, dt, file) +
//       '''
// // TODO: generate class sesuai JSON berikut
// // $json

// class ${pascal}RequestModel {
//   // fields here
// }
// ''';
// }

// String _tplModelResponse(
//   String pascal,
//   String author,
//   DateTime dt,
//   String json,
// ) {
//   final file = '${pascal.snakeCase}_response_model.dart';
//   return _header(author, dt, file) +
//       '''
// // TODO: generate class sesuai JSON berikut
// // $json

// class ${pascal}ResponseModel {
//   // fields here
// }
// ''';
// }

// void _appendToRepo(File repoFile, String pascal, String camel) {
//   if (!repoFile.existsSync()) {
//     repoFile.createSync(recursive: true);
//     repoFile.writeAsStringSync('''
// abstract class ${pascal}Repository {
//   Future<void> $camel();
// }
// ''');
//     return;
//   }

//   final content = repoFile.readAsStringSync();
//   if (!content.contains('$camel(')) {
//     final updated = content.replaceFirst(
//       RegExp(r'}\s*$'),
//       '  Future<void> $camel();\n}',
//     );
//     repoFile.writeAsStringSync(updated);
//   }
// }

// void _appendToRepoImpl(File repoImplFile, String pascal, String camel) {
//   if (!repoImplFile.existsSync()) {
//     repoImplFile.createSync(recursive: true);
//     repoImplFile.writeAsStringSync('''
// import '${pascal.snakeCase}_repository.dart';

// class ${pascal}RepositoryImpl implements ${pascal}Repository {
//   @override
//   Future<void> $camel() async {
//     // TODO: implement
//   }
// }
// ''');
//     return;
//   }

//   final content = repoImplFile.readAsStringSync();
//   if (!content.contains('$camel(')) {
//     final updated = content.replaceFirst(
//       RegExp(r'}\s*$'),
//       '  @override\n  Future<void> $camel() async {\n    // TODO: implement\n  }\n}',
//     );
//     repoImplFile.writeAsStringSync(updated);
//   }
// }

// void _appendToDs(File dsFile, String pascal, String camel) {
//   if (!dsFile.existsSync()) {
//     dsFile.createSync(recursive: true);
//     dsFile.writeAsStringSync('''
// abstract class ${pascal}RemoteDataSource {
//   Future<void> $camel();
// }
// ''');
//     return;
//   }

//   final content = dsFile.readAsStringSync();
//   if (!content.contains('$camel(')) {
//     final updated = content.replaceFirst(
//       RegExp(r'}\s*$'),
//       '  Future<void> $camel();\n}',
//     );
//     dsFile.writeAsStringSync(updated);
//   }
// }

// void _appendToDsImpl(
//   File dsImplFile,
//   String pascal,
//   String camel,
//   String endpoint,
// ) {
//   if (!dsImplFile.existsSync()) {
//     dsImplFile.createSync(recursive: true);
//     dsImplFile.writeAsStringSync('''
// import '${pascal.snakeCase}_remote_datasource.dart';

// class ${pascal}RemoteDataSourceImpl implements ${pascal}RemoteDataSource {
//   @override
//   Future<void> $camel() async {
//     // TODO: call endpoint "$endpoint"
//   }
// }
// ''');
//     return;
//   }

//   final content = dsImplFile.readAsStringSync();
//   if (!content.contains('$camel(')) {
//     final updated = content.replaceFirst(
//       RegExp(r'}\s*$'),
//       '  @override\n  Future<void> $camel() async {\n    // TODO: call endpoint "$endpoint"\n  }\n}',
//     );
//     dsImplFile.writeAsStringSync(updated);
//   }
// }

// String _tplUsecaseInterface(String pascal, String author, DateTime dt) {
//   final file = '${pascal.snakeCase}_usecase.dart';
//   return _header(author, dt, file) +
//       '''
// abstract class ${pascal}UseCase<T, P> {
//   Future<T> call(P params);
// }
// ''';
// }

// String _tplUsecaseImpl(
//   String pascal,
//   String snake,
//   String author,
//   DateTime dt,
// ) {
//   final file = '${snake}_usecase_impl.dart';
//   return _header(author, dt, file) +
//       '''
// import '${snake}_usecase.dart';
// import '../../data/repository/${snake}_repository.dart';

// class ${pascal}UseCaseImpl<T, P> implements ${pascal}UseCase<T, P> {
//   final ${pascal}Repository repo;

//   ${pascal}UseCaseImpl(this.repo);

//   @override
//   Future<T> call(P params) async {
//     // TODO: implement using repo
//     throw UnimplementedError();
//   }
// }
// ''';
// }
