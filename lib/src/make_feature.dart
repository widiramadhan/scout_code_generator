import 'dart:io';
import 'package:path/path.dart' as p;
import 'package:recase/recase.dart';
import 'config.dart';

void generateFeature({
  required Config config,
  required String featureName,
  required String author,
  required bool force,
  required String stateManagement,
}) {
  final snake = ReCase(featureName).snakeCase;
  final pascal = ReCase(featureName).pascalCase;
  final today = DateTime.now();

  final modelDir = config.model.replaceAll('features_name', snake);
  final entityDir = config.entity.replaceAll('features_name', snake);
  final datasourceDir = config.datasource.replaceAll('features_name', snake);
  final repositoryDir = config.repository.replaceAll('features_name', snake);
  final usecaseDir = config.usecase.replaceAll('features_name', snake);
  final uiDir = config.ui.replaceAll('features_name', snake);

  for (final dir in [
    modelDir,
    entityDir,
    datasourceDir,
    repositoryDir,
    usecaseDir,
    uiDir,
  ]) {
    Directory(dir).createSync(recursive: true);
  }

  // repository
  final repoFile = File(p.join(repositoryDir, '${snake}_repository.dart'));
  if (!repoFile.existsSync() || force) {
    repoFile.writeAsStringSync('''
/// Generated by scout
/// Author: $author
/// Date  : $today
/// File  : ${snake}_repository.dart

abstract class ${pascal}Repository {
  
}
''');
  }

  final repoImplFile = File(
    p.join(repositoryDir, '${snake}_repository_impl.dart'),
  );
  if (!repoImplFile.existsSync() || force) {
    repoImplFile.writeAsStringSync('''
/// Generated by scout
/// Author: $author
/// Date  : $today
/// File  : ${snake}_repository_impl.dart

import '${snake}_repository.dart';

class ${pascal}RepositoryImpl implements ${pascal}Repository {
  
}
''');
  }

  // datasource
  final dsFile = File(p.join(datasourceDir, '${snake}_remote_datasource.dart'));
  if (!dsFile.existsSync() || force) {
    dsFile.writeAsStringSync('''
/// Generated by scout
/// Author: $author
/// Date  : $today
/// File  : ${snake}_remote_datasource.dart

abstract class ${pascal}RemoteDataSource {
  
}
''');
  }

  final dsImplFile = File(
    p.join(datasourceDir, '${snake}_remote_datasource_impl.dart'),
  );
  if (!dsImplFile.existsSync() || force) {
    dsImplFile.writeAsStringSync('''
/// Generated by scout
/// Author: $author
/// Date  : $today
/// File  : ${snake}_remote_datasource_impl.dart

import '${snake}_remote_datasource.dart';

class ${pascal}RemoteDataSourceImpl implements ${pascal}RemoteDataSource {
  
}
''');
  }

  // ui
  final pageFile = File(p.join(uiDir, '${snake}_page.dart'));
  if (!pageFile.existsSync() || force) {
    String uiContent;

    switch (stateManagement) {
      case 'setstate':
        uiContent =
            '''
import 'package:flutter/material.dart';

class ${pascal}Page extends StatefulWidget {
  const ${pascal}Page({super.key});

  @override
  State<${pascal}Page> createState() => _${pascal}PageState();
}

class _${pascal}PageState extends State<${pascal}Page> {
  int counter = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('$pascal Page')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Counter: \$counter'),
            ElevatedButton(
              onPressed: () => setState(() => counter++),
              child: const Text('Increment'),
            ),
          ],
        ),
      ),
    );
  }
}
''';
        break;

      case 'provider':
        uiContent =
            '''
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controller/${snake}_controller.dart';

class ${pascal}Page extends StatelessWidget {
  const ${pascal}Page({super.key});

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (_) => ${pascal}Controller(),
      child: Consumer<${pascal}Controller>(
        builder: (context, controller, _) {
          return Scaffold(
            appBar: AppBar(title: const Text('$pascal Page')),
            body: Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text('Counter: \${controller.counter}'),
                  ElevatedButton(
                    onPressed: controller.increment,
                    child: const Text('Increment'),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}
''';
        break;

      case 'riverpod':
        uiContent =
            '''
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../controller/${snake}_controller.dart';

class ${pascal}Page extends ConsumerWidget {
  const ${pascal}Page({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final counter = ref.watch(${snake}Provider);

    return Scaffold(
      appBar: AppBar(title: const Text('$pascal Page')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Counter: \$counter'),
            ElevatedButton(
              onPressed: () => ref.read(${snake}Provider.notifier).increment(),
              child: const Text('Increment'),
            ),
          ],
        ),
      ),
    );
  }
}
''';
        break;

      case 'bloc':
        uiContent =
            '''
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../bloc/${snake}_bloc.dart';
import '../bloc/${snake}_event.dart';
import '../bloc/${snake}_state.dart';

class ${pascal}Page extends StatelessWidget {
  const ${pascal}Page({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (_) => ${pascal}Bloc(),
      child: BlocBuilder<${pascal}Bloc, ${pascal}State>(
        builder: (context, state) {
          return Scaffold(
            appBar: AppBar(title: const Text('$pascal Page')),
            body: Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text('Counter: \${state.counter}'),
                  ElevatedButton(
                    onPressed: () =>
                        context.read<${pascal}Bloc>().add(Increment${pascal}()),
                    child: const Text('Increment'),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}
''';
        break;

      case 'getx':
        uiContent =
            '''
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../controller/${snake}_controller.dart';

class ${pascal}Page extends StatelessWidget {
  const ${pascal}Page({super.key});

  @override
  Widget build(BuildContext context) {
    final controller = Get.put(${pascal}Controller());

    return Scaffold(
      appBar: AppBar(title: const Text('$pascal Page')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Obx(() => Text('Counter: \${controller.counter.value}')),
            ElevatedButton(
              onPressed: controller.increment,
              child: const Text('Increment'),
            ),
          ],
        ),
      ),
    );
  }
}
''';
        break;

      case 'mobx':
        uiContent =
            '''
import 'package:flutter/material.dart';
import 'package:flutter_mobx/flutter_mobx.dart';
import '../controller/${snake}_controller.dart';

class ${pascal}Page extends StatelessWidget {
  const ${pascal}Page({super.key});

  @override
  Widget build(BuildContext context) {
    final controller = ${pascal}Controller();

    return Scaffold(
      appBar: AppBar(title: const Text('$pascal Page')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Observer(builder: (_) => Text('Counter: \${controller.counter}')),
            ElevatedButton(
              onPressed: controller.increment,
              child: const Text('Increment'),
            ),
          ],
        ),
      ),
    );
  }
}
''';
        break;

      case 'redux':
        uiContent =
            '''
import 'package:flutter/material.dart';
import 'package:flutter_redux/flutter_redux.dart';
import 'package:redux/redux.dart';
import '../controller/${snake}_controller.dart';

class ${pascal}Page extends StatelessWidget {
  const ${pascal}Page({super.key});

  @override
  Widget build(BuildContext context) {
    return StoreProvider<AppState>(
      store: Store<AppState>(reducer, initialState: AppState.initial()),
      child: StoreConnector<AppState, int>(
        converter: (store) => store.state.counter,
        builder: (context, counter) {
          return Scaffold(
            appBar: AppBar(title: const Text('$pascal Page')),
            body: Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text('Counter: \$counter'),
                  ElevatedButton(
                    onPressed: () =>
                        StoreProvider.of<AppState>(context).dispatch(IncrementAction()),
                    child: const Text('Increment'),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}
''';
        break;

      case 'mvvm':
        uiContent =
            '''
import 'package:flutter/material.dart';
import '../controller/${snake}_viewmodel.dart';

class ${pascal}Page extends StatelessWidget {
  const ${pascal}Page({super.key});

  @override
  Widget build(BuildContext context) {
    final viewModel = ${pascal}ViewModel();

    return Scaffold(
      appBar: AppBar(title: const Text('$pascal Page')),
      body: Center(
        child: AnimatedBuilder(
          animation: viewModel,
          builder: (context, _) {
            return Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text('Counter: \${viewModel.counter}'),
                ElevatedButton(
                  onPressed: viewModel.increment,
                  child: const Text('Increment'),
                ),
              ],
            );
          },
        ),
      ),
    );
  }
}
''';
        break;

      default:
        uiContent = '/// Unsupported state management: \$stateManagement';
    }

    pageFile.writeAsStringSync('''
/// Generated by scout
/// Author: $author
/// Date  : $today
/// File  : ${snake}_page.dart

$uiContent
''');
  }

  // Handle state management specific folders and files
  if (stateManagement == 'bloc') {
    // For BLoC: create bloc folder directly under the feature directory
    final featureDir = p.dirname(config.ui.replaceAll('features_name', snake));
    final blocDir = p.join(featureDir, 'bloc');
    Directory(blocDir).createSync(recursive: true);

    // Create BLoC files
    final blocFile = File(p.join(blocDir, '${snake}_bloc.dart'));
    final eventFile = File(p.join(blocDir, '${snake}_event.dart'));
    final stateFile = File(p.join(blocDir, '${snake}_state.dart'));

    if (!blocFile.existsSync() || force) {
      blocFile.writeAsStringSync('''
/// Generated by scout
/// Author: $author
/// Date  : $today
/// File  : ${snake}_bloc.dart

import 'package:flutter_bloc/flutter_bloc.dart';
import '${snake}_event.dart';
import '${snake}_state.dart';

class ${pascal}Bloc extends Bloc<${pascal}Event, ${pascal}State> {
  ${pascal}Bloc() : super(${pascal}Initial()) {
    on<Increment${pascal}>(_onIncrement);
  }

  void _onIncrement(Increment${pascal} event, Emitter<${pascal}State> emit) {
    emit(${pascal}State(counter: state.counter + 1));
  }
}
''');
    }

    if (!eventFile.existsSync() || force) {
      eventFile.writeAsStringSync('''
/// Generated by scout
/// Author: $author
/// Date  : $today
/// File  : ${snake}_event.dart

abstract class ${pascal}Event {}

class Increment${pascal} extends ${pascal}Event {}
''');
    }

    if (!stateFile.existsSync() || force) {
      stateFile.writeAsStringSync('''
/// Generated by scout
/// Author: $author
/// Date  : $today
/// File  : ${snake}_state.dart

class ${pascal}State {
  final int counter;
  
  ${pascal}State({this.counter = 0});
}

class ${pascal}Initial extends ${pascal}State {}
''');
    }
  } else {
    // Create controller directory only for non-BLoC state management
    final controllerDir = config.controller.replaceAll('features_name', snake);
    Directory(controllerDir).createSync(recursive: true);

    final controllerFile = File(
      p.join(controllerDir, '${snake}_controller.dart'),
    );
    if (!controllerFile.existsSync() || force) {
      String controllerContent;

      switch (stateManagement) {
        case 'provider':
          controllerContent =
              '''
import 'package:flutter/foundation.dart';

class ${pascal}Controller extends ChangeNotifier {
  int counter = 0;

  void increment() {
    counter++;
    notifyListeners();
  }
}
''';
          break;

        case 'riverpod':
          controllerContent =
              '''
import 'package:flutter_riverpod/flutter_riverpod.dart';

final ${snake}Provider = StateNotifierProvider<${pascal}Controller, int>(
  (ref) => ${pascal}Controller(),
);

class ${pascal}Controller extends StateNotifier<int> {
  ${pascal}Controller() : super(0);

  void increment() => state++;
}
''';
          break;

        case 'getx':
          controllerContent =
              '''
import 'package:get/get.dart';

class ${pascal}Controller extends GetxController {
  var counter = 0.obs;

  void increment() => counter.value++;
}
''';
          break;

        case 'mobx':
          controllerContent =
              '''
import 'package:mobx/mobx.dart';
part '${snake}_controller.g.dart';

class ${pascal}Controller = _${pascal}ControllerBase with _\$${pascal}Controller;

abstract class _${pascal}ControllerBase with Store {
  @observable
  int counter = 0;

  @action
  void increment() => counter++;
}
''';
          break;

        case 'redux':
          controllerContent = '''
// Redux State
class AppState {
  final int counter;
  AppState(this.counter);

  factory AppState.initial() => AppState(0);
}

// Redux Action
class IncrementAction {}

// Redux Reducer
AppState reducer(AppState state, dynamic action) {
  if (action is IncrementAction) {
    return AppState(state.counter + 1);
  }
  return state;
}
''';
          break;

        case 'mvvm':
          final viewModelFile = File(
            p.join(controllerDir, '${snake}_viewmodel.dart'),
          );
          if (!viewModelFile.existsSync() || force) {
            viewModelFile.writeAsStringSync('''
import 'package:flutter/foundation.dart';

class ${pascal}ViewModel extends ChangeNotifier {
  int _counter = 0;

  int get counter => _counter;

  void increment() {
    _counter++;
    notifyListeners();
  }
}
''');
          }
          controllerContent = '// ViewModel created in ${snake}_viewmodel.dart';
          break;

        default:
          controllerContent = '// No controller generated for $stateManagement';
      }

      controllerFile.writeAsStringSync('''
/// Generated by scout
/// Author: $author
/// Date  : $today
/// File  : ${snake}_controller.dart

$controllerContent
''');
    }
  }

  stdout.writeln('[✓] Feature "$featureName" generated');
}
